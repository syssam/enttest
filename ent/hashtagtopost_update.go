// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"enttest/ent/hashtag"
	"enttest/ent/hashtagtopost"
	"enttest/ent/post"
	"enttest/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HashtagToPostUpdate is the builder for updating HashtagToPost entities.
type HashtagToPostUpdate struct {
	config
	hooks    []Hook
	mutation *HashtagToPostMutation
}

// Where appends a list predicates to the HashtagToPostUpdate builder.
func (htpu *HashtagToPostUpdate) Where(ps ...predicate.HashtagToPost) *HashtagToPostUpdate {
	htpu.mutation.Where(ps...)
	return htpu
}

// SetHashtagID sets the "hashtag_id" field.
func (htpu *HashtagToPostUpdate) SetHashtagID(s string) *HashtagToPostUpdate {
	htpu.mutation.SetHashtagID(s)
	return htpu
}

// SetPostID sets the "post_id" field.
func (htpu *HashtagToPostUpdate) SetPostID(s string) *HashtagToPostUpdate {
	htpu.mutation.SetPostID(s)
	return htpu
}

// SetPost sets the "post" edge to the Post entity.
func (htpu *HashtagToPostUpdate) SetPost(p *Post) *HashtagToPostUpdate {
	return htpu.SetPostID(p.ID)
}

// SetHashtag sets the "hashtag" edge to the Hashtag entity.
func (htpu *HashtagToPostUpdate) SetHashtag(h *Hashtag) *HashtagToPostUpdate {
	return htpu.SetHashtagID(h.ID)
}

// Mutation returns the HashtagToPostMutation object of the builder.
func (htpu *HashtagToPostUpdate) Mutation() *HashtagToPostMutation {
	return htpu.mutation
}

// ClearPost clears the "post" edge to the Post entity.
func (htpu *HashtagToPostUpdate) ClearPost() *HashtagToPostUpdate {
	htpu.mutation.ClearPost()
	return htpu
}

// ClearHashtag clears the "hashtag" edge to the Hashtag entity.
func (htpu *HashtagToPostUpdate) ClearHashtag() *HashtagToPostUpdate {
	htpu.mutation.ClearHashtag()
	return htpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (htpu *HashtagToPostUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(htpu.hooks) == 0 {
		if err = htpu.check(); err != nil {
			return 0, err
		}
		affected, err = htpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HashtagToPostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = htpu.check(); err != nil {
				return 0, err
			}
			htpu.mutation = mutation
			affected, err = htpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(htpu.hooks) - 1; i >= 0; i-- {
			if htpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = htpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, htpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (htpu *HashtagToPostUpdate) SaveX(ctx context.Context) int {
	affected, err := htpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (htpu *HashtagToPostUpdate) Exec(ctx context.Context) error {
	_, err := htpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htpu *HashtagToPostUpdate) ExecX(ctx context.Context) {
	if err := htpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htpu *HashtagToPostUpdate) check() error {
	if v, ok := htpu.mutation.HashtagID(); ok {
		if err := hashtagtopost.HashtagIDValidator(v); err != nil {
			return &ValidationError{Name: "hashtag_id", err: fmt.Errorf(`ent: validator failed for field "HashtagToPost.hashtag_id": %w`, err)}
		}
	}
	if v, ok := htpu.mutation.PostID(); ok {
		if err := hashtagtopost.PostIDValidator(v); err != nil {
			return &ValidationError{Name: "post_id", err: fmt.Errorf(`ent: validator failed for field "HashtagToPost.post_id": %w`, err)}
		}
	}
	if _, ok := htpu.mutation.PostID(); htpu.mutation.PostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HashtagToPost.post"`)
	}
	if _, ok := htpu.mutation.HashtagID(); htpu.mutation.HashtagCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HashtagToPost.hashtag"`)
	}
	return nil
}

func (htpu *HashtagToPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hashtagtopost.Table,
			Columns: hashtagtopost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: hashtagtopost.FieldID,
			},
		},
	}
	if ps := htpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if htpu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hashtagtopost.PostTable,
			Columns: []string{hashtagtopost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: post.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htpu.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hashtagtopost.PostTable,
			Columns: []string{hashtagtopost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htpu.mutation.HashtagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hashtagtopost.HashtagTable,
			Columns: []string{hashtagtopost.HashtagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hashtag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htpu.mutation.HashtagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hashtagtopost.HashtagTable,
			Columns: []string{hashtagtopost.HashtagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hashtag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, htpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hashtagtopost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// HashtagToPostUpdateOne is the builder for updating a single HashtagToPost entity.
type HashtagToPostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HashtagToPostMutation
}

// SetHashtagID sets the "hashtag_id" field.
func (htpuo *HashtagToPostUpdateOne) SetHashtagID(s string) *HashtagToPostUpdateOne {
	htpuo.mutation.SetHashtagID(s)
	return htpuo
}

// SetPostID sets the "post_id" field.
func (htpuo *HashtagToPostUpdateOne) SetPostID(s string) *HashtagToPostUpdateOne {
	htpuo.mutation.SetPostID(s)
	return htpuo
}

// SetPost sets the "post" edge to the Post entity.
func (htpuo *HashtagToPostUpdateOne) SetPost(p *Post) *HashtagToPostUpdateOne {
	return htpuo.SetPostID(p.ID)
}

// SetHashtag sets the "hashtag" edge to the Hashtag entity.
func (htpuo *HashtagToPostUpdateOne) SetHashtag(h *Hashtag) *HashtagToPostUpdateOne {
	return htpuo.SetHashtagID(h.ID)
}

// Mutation returns the HashtagToPostMutation object of the builder.
func (htpuo *HashtagToPostUpdateOne) Mutation() *HashtagToPostMutation {
	return htpuo.mutation
}

// ClearPost clears the "post" edge to the Post entity.
func (htpuo *HashtagToPostUpdateOne) ClearPost() *HashtagToPostUpdateOne {
	htpuo.mutation.ClearPost()
	return htpuo
}

// ClearHashtag clears the "hashtag" edge to the Hashtag entity.
func (htpuo *HashtagToPostUpdateOne) ClearHashtag() *HashtagToPostUpdateOne {
	htpuo.mutation.ClearHashtag()
	return htpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (htpuo *HashtagToPostUpdateOne) Select(field string, fields ...string) *HashtagToPostUpdateOne {
	htpuo.fields = append([]string{field}, fields...)
	return htpuo
}

// Save executes the query and returns the updated HashtagToPost entity.
func (htpuo *HashtagToPostUpdateOne) Save(ctx context.Context) (*HashtagToPost, error) {
	var (
		err  error
		node *HashtagToPost
	)
	if len(htpuo.hooks) == 0 {
		if err = htpuo.check(); err != nil {
			return nil, err
		}
		node, err = htpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HashtagToPostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = htpuo.check(); err != nil {
				return nil, err
			}
			htpuo.mutation = mutation
			node, err = htpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(htpuo.hooks) - 1; i >= 0; i-- {
			if htpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = htpuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, htpuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*HashtagToPost)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from HashtagToPostMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (htpuo *HashtagToPostUpdateOne) SaveX(ctx context.Context) *HashtagToPost {
	node, err := htpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (htpuo *HashtagToPostUpdateOne) Exec(ctx context.Context) error {
	_, err := htpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htpuo *HashtagToPostUpdateOne) ExecX(ctx context.Context) {
	if err := htpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htpuo *HashtagToPostUpdateOne) check() error {
	if v, ok := htpuo.mutation.HashtagID(); ok {
		if err := hashtagtopost.HashtagIDValidator(v); err != nil {
			return &ValidationError{Name: "hashtag_id", err: fmt.Errorf(`ent: validator failed for field "HashtagToPost.hashtag_id": %w`, err)}
		}
	}
	if v, ok := htpuo.mutation.PostID(); ok {
		if err := hashtagtopost.PostIDValidator(v); err != nil {
			return &ValidationError{Name: "post_id", err: fmt.Errorf(`ent: validator failed for field "HashtagToPost.post_id": %w`, err)}
		}
	}
	if _, ok := htpuo.mutation.PostID(); htpuo.mutation.PostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HashtagToPost.post"`)
	}
	if _, ok := htpuo.mutation.HashtagID(); htpuo.mutation.HashtagCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HashtagToPost.hashtag"`)
	}
	return nil
}

func (htpuo *HashtagToPostUpdateOne) sqlSave(ctx context.Context) (_node *HashtagToPost, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hashtagtopost.Table,
			Columns: hashtagtopost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: hashtagtopost.FieldID,
			},
		},
	}
	id, ok := htpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HashtagToPost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := htpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hashtagtopost.FieldID)
		for _, f := range fields {
			if !hashtagtopost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hashtagtopost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := htpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if htpuo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hashtagtopost.PostTable,
			Columns: []string{hashtagtopost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: post.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htpuo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hashtagtopost.PostTable,
			Columns: []string{hashtagtopost.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htpuo.mutation.HashtagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hashtagtopost.HashtagTable,
			Columns: []string{hashtagtopost.HashtagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hashtag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htpuo.mutation.HashtagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hashtagtopost.HashtagTable,
			Columns: []string{hashtagtopost.HashtagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hashtag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HashtagToPost{config: htpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, htpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hashtagtopost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
