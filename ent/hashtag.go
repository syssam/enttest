// Code generated by ent, DO NOT EDIT.

package ent

import (
	"enttest/ent/hashtag"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Hashtag is the model entity for the Hashtag schema.
type Hashtag struct {
	config
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HashtagQuery when eager-loading is set.
	Edges HashtagEdges `json:"edges"`
}

// HashtagEdges holds the relations/edges for other nodes in the graph.
type HashtagEdges struct {
	// Post holds the value of the post edge.
	Post []*Post `json:"post,omitempty"`
	// HashtagToPost holds the value of the hashtag_to_post edge.
	HashtagToPost []*HashtagToPost `json:"hashtag_to_post,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading.
func (e HashtagEdges) PostOrErr() ([]*Post, error) {
	if e.loadedTypes[0] {
		return e.Post, nil
	}
	return nil, &NotLoadedError{edge: "post"}
}

// HashtagToPostOrErr returns the HashtagToPost value or an error if the edge
// was not loaded in eager-loading.
func (e HashtagEdges) HashtagToPostOrErr() ([]*HashtagToPost, error) {
	if e.loadedTypes[1] {
		return e.HashtagToPost, nil
	}
	return nil, &NotLoadedError{edge: "hashtag_to_post"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Hashtag) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case hashtag.FieldID:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Hashtag", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Hashtag fields.
func (h *Hashtag) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hashtag.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				h.ID = value.String
			}
		}
	}
	return nil
}

// QueryPost queries the "post" edge of the Hashtag entity.
func (h *Hashtag) QueryPost() *PostQuery {
	return (&HashtagClient{config: h.config}).QueryPost(h)
}

// QueryHashtagToPost queries the "hashtag_to_post" edge of the Hashtag entity.
func (h *Hashtag) QueryHashtagToPost() *HashtagToPostQuery {
	return (&HashtagClient{config: h.config}).QueryHashtagToPost(h)
}

// Update returns a builder for updating this Hashtag.
// Note that you need to call Hashtag.Unwrap() before calling this method if this Hashtag
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Hashtag) Update() *HashtagUpdateOne {
	return (&HashtagClient{config: h.config}).UpdateOne(h)
}

// Unwrap unwraps the Hashtag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Hashtag) Unwrap() *Hashtag {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Hashtag is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Hashtag) String() string {
	var builder strings.Builder
	builder.WriteString("Hashtag(")
	builder.WriteString(fmt.Sprintf("id=%v", h.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Hashtags is a parsable slice of Hashtag.
type Hashtags []*Hashtag

func (h Hashtags) config(cfg config) {
	for _i := range h {
		h[_i].config = cfg
	}
}
