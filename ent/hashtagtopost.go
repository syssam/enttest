// Code generated by ent, DO NOT EDIT.

package ent

import (
	"enttest/ent/hashtag"
	"enttest/ent/hashtagtopost"
	"enttest/ent/post"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// HashtagToPost is the model entity for the HashtagToPost schema.
type HashtagToPost struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HashtagID holds the value of the "hashtag_id" field.
	HashtagID string `json:"hashtag_id,omitempty"`
	// PostID holds the value of the "post_id" field.
	PostID string `json:"post_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HashtagToPostQuery when eager-loading is set.
	Edges HashtagToPostEdges `json:"edges"`
}

// HashtagToPostEdges holds the relations/edges for other nodes in the graph.
type HashtagToPostEdges struct {
	// Post holds the value of the post edge.
	Post *Post `json:"post,omitempty"`
	// Hashtag holds the value of the hashtag edge.
	Hashtag *Hashtag `json:"hashtag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HashtagToPostEdges) PostOrErr() (*Post, error) {
	if e.loadedTypes[0] {
		if e.Post == nil {
			// The edge post was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: post.Label}
		}
		return e.Post, nil
	}
	return nil, &NotLoadedError{edge: "post"}
}

// HashtagOrErr returns the Hashtag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HashtagToPostEdges) HashtagOrErr() (*Hashtag, error) {
	if e.loadedTypes[1] {
		if e.Hashtag == nil {
			// The edge hashtag was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: hashtag.Label}
		}
		return e.Hashtag, nil
	}
	return nil, &NotLoadedError{edge: "hashtag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HashtagToPost) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case hashtagtopost.FieldID, hashtagtopost.FieldHashtagID, hashtagtopost.FieldPostID:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type HashtagToPost", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HashtagToPost fields.
func (htp *HashtagToPost) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hashtagtopost.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				htp.ID = value.String
			}
		case hashtagtopost.FieldHashtagID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hashtag_id", values[i])
			} else if value.Valid {
				htp.HashtagID = value.String
			}
		case hashtagtopost.FieldPostID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field post_id", values[i])
			} else if value.Valid {
				htp.PostID = value.String
			}
		}
	}
	return nil
}

// QueryPost queries the "post" edge of the HashtagToPost entity.
func (htp *HashtagToPost) QueryPost() *PostQuery {
	return (&HashtagToPostClient{config: htp.config}).QueryPost(htp)
}

// QueryHashtag queries the "hashtag" edge of the HashtagToPost entity.
func (htp *HashtagToPost) QueryHashtag() *HashtagQuery {
	return (&HashtagToPostClient{config: htp.config}).QueryHashtag(htp)
}

// Update returns a builder for updating this HashtagToPost.
// Note that you need to call HashtagToPost.Unwrap() before calling this method if this HashtagToPost
// was returned from a transaction, and the transaction was committed or rolled back.
func (htp *HashtagToPost) Update() *HashtagToPostUpdateOne {
	return (&HashtagToPostClient{config: htp.config}).UpdateOne(htp)
}

// Unwrap unwraps the HashtagToPost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (htp *HashtagToPost) Unwrap() *HashtagToPost {
	_tx, ok := htp.config.driver.(*txDriver)
	if !ok {
		panic("ent: HashtagToPost is not a transactional entity")
	}
	htp.config.driver = _tx.drv
	return htp
}

// String implements the fmt.Stringer.
func (htp *HashtagToPost) String() string {
	var builder strings.Builder
	builder.WriteString("HashtagToPost(")
	builder.WriteString(fmt.Sprintf("id=%v, ", htp.ID))
	builder.WriteString("hashtag_id=")
	builder.WriteString(htp.HashtagID)
	builder.WriteString(", ")
	builder.WriteString("post_id=")
	builder.WriteString(htp.PostID)
	builder.WriteByte(')')
	return builder.String()
}

// HashtagToPosts is a parsable slice of HashtagToPost.
type HashtagToPosts []*HashtagToPost

func (htp HashtagToPosts) config(cfg config) {
	for _i := range htp {
		htp[_i].config = cfg
	}
}
