// Code generated by ent, DO NOT EDIT.

package ent

import (
	"enttest/ent/hashtag"
	"enttest/ent/hashtagtopost"
	"enttest/ent/post"
	"enttest/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	hashtagFields := schema.Hashtag{}.Fields()
	_ = hashtagFields
	// hashtagDescID is the schema descriptor for id field.
	hashtagDescID := hashtagFields[0].Descriptor()
	// hashtag.DefaultID holds the default value on creation for the id field.
	hashtag.DefaultID = hashtagDescID.Default.(func() string)
	// hashtag.IDValidator is a validator for the "id" field. It is called by the builders before save.
	hashtag.IDValidator = func() func(string) error {
		validators := hashtagDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	hashtagtopostFields := schema.HashtagToPost{}.Fields()
	_ = hashtagtopostFields
	// hashtagtopostDescHashtagID is the schema descriptor for hashtag_id field.
	hashtagtopostDescHashtagID := hashtagtopostFields[1].Descriptor()
	// hashtagtopost.HashtagIDValidator is a validator for the "hashtag_id" field. It is called by the builders before save.
	hashtagtopost.HashtagIDValidator = func() func(string) error {
		validators := hashtagtopostDescHashtagID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(hashtag string) error {
			for _, fn := range fns {
				if err := fn(hashtag); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// hashtagtopostDescPostID is the schema descriptor for post_id field.
	hashtagtopostDescPostID := hashtagtopostFields[2].Descriptor()
	// hashtagtopost.PostIDValidator is a validator for the "post_id" field. It is called by the builders before save.
	hashtagtopost.PostIDValidator = func() func(string) error {
		validators := hashtagtopostDescPostID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(post string) error {
			for _, fn := range fns {
				if err := fn(post); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// hashtagtopostDescID is the schema descriptor for id field.
	hashtagtopostDescID := hashtagtopostFields[0].Descriptor()
	// hashtagtopost.DefaultID holds the default value on creation for the id field.
	hashtagtopost.DefaultID = hashtagtopostDescID.Default.(func() string)
	// hashtagtopost.IDValidator is a validator for the "id" field. It is called by the builders before save.
	hashtagtopost.IDValidator = func() func(string) error {
		validators := hashtagtopostDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	postFields := schema.Post{}.Fields()
	_ = postFields
	// postDescTitle is the schema descriptor for title field.
	postDescTitle := postFields[1].Descriptor()
	// post.DefaultTitle holds the default value on creation for the title field.
	post.DefaultTitle = postDescTitle.Default.(string)
	// post.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	post.TitleValidator = postDescTitle.Validators[0].(func(string) error)
	// postDescID is the schema descriptor for id field.
	postDescID := postFields[0].Descriptor()
	// post.DefaultID holds the default value on creation for the id field.
	post.DefaultID = postDescID.Default.(func() string)
	// post.IDValidator is a validator for the "id" field. It is called by the builders before save.
	post.IDValidator = func() func(string) error {
		validators := postDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
