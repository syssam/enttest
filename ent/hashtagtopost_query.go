// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"enttest/ent/hashtag"
	"enttest/ent/hashtagtopost"
	"enttest/ent/post"
	"enttest/ent/predicate"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HashtagToPostQuery is the builder for querying HashtagToPost entities.
type HashtagToPostQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.HashtagToPost
	// eager-loading edges.
	withPost    *PostQuery
	withHashtag *HashtagQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HashtagToPostQuery builder.
func (htpq *HashtagToPostQuery) Where(ps ...predicate.HashtagToPost) *HashtagToPostQuery {
	htpq.predicates = append(htpq.predicates, ps...)
	return htpq
}

// Limit adds a limit step to the query.
func (htpq *HashtagToPostQuery) Limit(limit int) *HashtagToPostQuery {
	htpq.limit = &limit
	return htpq
}

// Offset adds an offset step to the query.
func (htpq *HashtagToPostQuery) Offset(offset int) *HashtagToPostQuery {
	htpq.offset = &offset
	return htpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (htpq *HashtagToPostQuery) Unique(unique bool) *HashtagToPostQuery {
	htpq.unique = &unique
	return htpq
}

// Order adds an order step to the query.
func (htpq *HashtagToPostQuery) Order(o ...OrderFunc) *HashtagToPostQuery {
	htpq.order = append(htpq.order, o...)
	return htpq
}

// QueryPost chains the current query on the "post" edge.
func (htpq *HashtagToPostQuery) QueryPost() *PostQuery {
	query := &PostQuery{config: htpq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hashtagtopost.Table, hashtagtopost.FieldID, selector),
			sqlgraph.To(post.Table, post.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hashtagtopost.PostTable, hashtagtopost.PostColumn),
		)
		fromU = sqlgraph.SetNeighbors(htpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHashtag chains the current query on the "hashtag" edge.
func (htpq *HashtagToPostQuery) QueryHashtag() *HashtagQuery {
	query := &HashtagQuery{config: htpq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hashtagtopost.Table, hashtagtopost.FieldID, selector),
			sqlgraph.To(hashtag.Table, hashtag.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hashtagtopost.HashtagTable, hashtagtopost.HashtagColumn),
		)
		fromU = sqlgraph.SetNeighbors(htpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HashtagToPost entity from the query.
// Returns a *NotFoundError when no HashtagToPost was found.
func (htpq *HashtagToPostQuery) First(ctx context.Context) (*HashtagToPost, error) {
	nodes, err := htpq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hashtagtopost.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (htpq *HashtagToPostQuery) FirstX(ctx context.Context) *HashtagToPost {
	node, err := htpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HashtagToPost ID from the query.
// Returns a *NotFoundError when no HashtagToPost ID was found.
func (htpq *HashtagToPostQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = htpq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hashtagtopost.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (htpq *HashtagToPostQuery) FirstIDX(ctx context.Context) string {
	id, err := htpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HashtagToPost entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HashtagToPost entity is found.
// Returns a *NotFoundError when no HashtagToPost entities are found.
func (htpq *HashtagToPostQuery) Only(ctx context.Context) (*HashtagToPost, error) {
	nodes, err := htpq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hashtagtopost.Label}
	default:
		return nil, &NotSingularError{hashtagtopost.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (htpq *HashtagToPostQuery) OnlyX(ctx context.Context) *HashtagToPost {
	node, err := htpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HashtagToPost ID in the query.
// Returns a *NotSingularError when more than one HashtagToPost ID is found.
// Returns a *NotFoundError when no entities are found.
func (htpq *HashtagToPostQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = htpq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hashtagtopost.Label}
	default:
		err = &NotSingularError{hashtagtopost.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (htpq *HashtagToPostQuery) OnlyIDX(ctx context.Context) string {
	id, err := htpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HashtagToPosts.
func (htpq *HashtagToPostQuery) All(ctx context.Context) ([]*HashtagToPost, error) {
	if err := htpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return htpq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (htpq *HashtagToPostQuery) AllX(ctx context.Context) []*HashtagToPost {
	nodes, err := htpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HashtagToPost IDs.
func (htpq *HashtagToPostQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := htpq.Select(hashtagtopost.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (htpq *HashtagToPostQuery) IDsX(ctx context.Context) []string {
	ids, err := htpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (htpq *HashtagToPostQuery) Count(ctx context.Context) (int, error) {
	if err := htpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return htpq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (htpq *HashtagToPostQuery) CountX(ctx context.Context) int {
	count, err := htpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (htpq *HashtagToPostQuery) Exist(ctx context.Context) (bool, error) {
	if err := htpq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return htpq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (htpq *HashtagToPostQuery) ExistX(ctx context.Context) bool {
	exist, err := htpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HashtagToPostQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (htpq *HashtagToPostQuery) Clone() *HashtagToPostQuery {
	if htpq == nil {
		return nil
	}
	return &HashtagToPostQuery{
		config:      htpq.config,
		limit:       htpq.limit,
		offset:      htpq.offset,
		order:       append([]OrderFunc{}, htpq.order...),
		predicates:  append([]predicate.HashtagToPost{}, htpq.predicates...),
		withPost:    htpq.withPost.Clone(),
		withHashtag: htpq.withHashtag.Clone(),
		// clone intermediate query.
		sql:    htpq.sql.Clone(),
		path:   htpq.path,
		unique: htpq.unique,
	}
}

// WithPost tells the query-builder to eager-load the nodes that are connected to
// the "post" edge. The optional arguments are used to configure the query builder of the edge.
func (htpq *HashtagToPostQuery) WithPost(opts ...func(*PostQuery)) *HashtagToPostQuery {
	query := &PostQuery{config: htpq.config}
	for _, opt := range opts {
		opt(query)
	}
	htpq.withPost = query
	return htpq
}

// WithHashtag tells the query-builder to eager-load the nodes that are connected to
// the "hashtag" edge. The optional arguments are used to configure the query builder of the edge.
func (htpq *HashtagToPostQuery) WithHashtag(opts ...func(*HashtagQuery)) *HashtagToPostQuery {
	query := &HashtagQuery{config: htpq.config}
	for _, opt := range opts {
		opt(query)
	}
	htpq.withHashtag = query
	return htpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		HashtagID string `json:"hashtag_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HashtagToPost.Query().
//		GroupBy(hashtagtopost.FieldHashtagID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (htpq *HashtagToPostQuery) GroupBy(field string, fields ...string) *HashtagToPostGroupBy {
	grbuild := &HashtagToPostGroupBy{config: htpq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := htpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return htpq.sqlQuery(ctx), nil
	}
	grbuild.label = hashtagtopost.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		HashtagID string `json:"hashtag_id,omitempty"`
//	}
//
//	client.HashtagToPost.Query().
//		Select(hashtagtopost.FieldHashtagID).
//		Scan(ctx, &v)
//
func (htpq *HashtagToPostQuery) Select(fields ...string) *HashtagToPostSelect {
	htpq.fields = append(htpq.fields, fields...)
	selbuild := &HashtagToPostSelect{HashtagToPostQuery: htpq}
	selbuild.label = hashtagtopost.Label
	selbuild.flds, selbuild.scan = &htpq.fields, selbuild.Scan
	return selbuild
}

func (htpq *HashtagToPostQuery) prepareQuery(ctx context.Context) error {
	for _, f := range htpq.fields {
		if !hashtagtopost.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if htpq.path != nil {
		prev, err := htpq.path(ctx)
		if err != nil {
			return err
		}
		htpq.sql = prev
	}
	return nil
}

func (htpq *HashtagToPostQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HashtagToPost, error) {
	var (
		nodes       = []*HashtagToPost{}
		_spec       = htpq.querySpec()
		loadedTypes = [2]bool{
			htpq.withPost != nil,
			htpq.withHashtag != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*HashtagToPost).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &HashtagToPost{config: htpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, htpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := htpq.withPost; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*HashtagToPost)
		for i := range nodes {
			fk := nodes[i].PostID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(post.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "post_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Post = n
			}
		}
	}

	if query := htpq.withHashtag; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*HashtagToPost)
		for i := range nodes {
			fk := nodes[i].HashtagID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(hashtag.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "hashtag_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Hashtag = n
			}
		}
	}

	return nodes, nil
}

func (htpq *HashtagToPostQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := htpq.querySpec()
	_spec.Node.Columns = htpq.fields
	if len(htpq.fields) > 0 {
		_spec.Unique = htpq.unique != nil && *htpq.unique
	}
	return sqlgraph.CountNodes(ctx, htpq.driver, _spec)
}

func (htpq *HashtagToPostQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := htpq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (htpq *HashtagToPostQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hashtagtopost.Table,
			Columns: hashtagtopost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: hashtagtopost.FieldID,
			},
		},
		From:   htpq.sql,
		Unique: true,
	}
	if unique := htpq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := htpq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hashtagtopost.FieldID)
		for i := range fields {
			if fields[i] != hashtagtopost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := htpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := htpq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := htpq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := htpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (htpq *HashtagToPostQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(htpq.driver.Dialect())
	t1 := builder.Table(hashtagtopost.Table)
	columns := htpq.fields
	if len(columns) == 0 {
		columns = hashtagtopost.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if htpq.sql != nil {
		selector = htpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if htpq.unique != nil && *htpq.unique {
		selector.Distinct()
	}
	for _, p := range htpq.predicates {
		p(selector)
	}
	for _, p := range htpq.order {
		p(selector)
	}
	if offset := htpq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := htpq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HashtagToPostGroupBy is the group-by builder for HashtagToPost entities.
type HashtagToPostGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (htpgb *HashtagToPostGroupBy) Aggregate(fns ...AggregateFunc) *HashtagToPostGroupBy {
	htpgb.fns = append(htpgb.fns, fns...)
	return htpgb
}

// Scan applies the group-by query and scans the result into the given value.
func (htpgb *HashtagToPostGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := htpgb.path(ctx)
	if err != nil {
		return err
	}
	htpgb.sql = query
	return htpgb.sqlScan(ctx, v)
}

func (htpgb *HashtagToPostGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range htpgb.fields {
		if !hashtagtopost.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := htpgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := htpgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (htpgb *HashtagToPostGroupBy) sqlQuery() *sql.Selector {
	selector := htpgb.sql.Select()
	aggregation := make([]string, 0, len(htpgb.fns))
	for _, fn := range htpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(htpgb.fields)+len(htpgb.fns))
		for _, f := range htpgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(htpgb.fields...)...)
}

// HashtagToPostSelect is the builder for selecting fields of HashtagToPost entities.
type HashtagToPostSelect struct {
	*HashtagToPostQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (htps *HashtagToPostSelect) Scan(ctx context.Context, v interface{}) error {
	if err := htps.prepareQuery(ctx); err != nil {
		return err
	}
	htps.sql = htps.HashtagToPostQuery.sqlQuery(ctx)
	return htps.sqlScan(ctx, v)
}

func (htps *HashtagToPostSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := htps.sql.Query()
	if err := htps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
