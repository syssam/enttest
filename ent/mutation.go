// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"enttest/ent/hashtag"
	"enttest/ent/hashtagtopost"
	"enttest/ent/post"
	"enttest/ent/predicate"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeHashtag       = "Hashtag"
	TypeHashtagToPost = "HashtagToPost"
	TypePost          = "Post"
)

// HashtagMutation represents an operation that mutates the Hashtag nodes in the graph.
type HashtagMutation struct {
	config
	op                     Op
	typ                    string
	id                     *string
	clearedFields          map[string]struct{}
	post                   map[string]struct{}
	removedpost            map[string]struct{}
	clearedpost            bool
	hashtag_to_post        map[string]struct{}
	removedhashtag_to_post map[string]struct{}
	clearedhashtag_to_post bool
	done                   bool
	oldValue               func(context.Context) (*Hashtag, error)
	predicates             []predicate.Hashtag
}

var _ ent.Mutation = (*HashtagMutation)(nil)

// hashtagOption allows management of the mutation configuration using functional options.
type hashtagOption func(*HashtagMutation)

// newHashtagMutation creates new mutation for the Hashtag entity.
func newHashtagMutation(c config, op Op, opts ...hashtagOption) *HashtagMutation {
	m := &HashtagMutation{
		config:        c,
		op:            op,
		typ:           TypeHashtag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHashtagID sets the ID field of the mutation.
func withHashtagID(id string) hashtagOption {
	return func(m *HashtagMutation) {
		var (
			err   error
			once  sync.Once
			value *Hashtag
		)
		m.oldValue = func(ctx context.Context) (*Hashtag, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Hashtag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHashtag sets the old Hashtag of the mutation.
func withHashtag(node *Hashtag) hashtagOption {
	return func(m *HashtagMutation) {
		m.oldValue = func(context.Context) (*Hashtag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HashtagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HashtagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Hashtag entities.
func (m *HashtagMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HashtagMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HashtagMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Hashtag.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// AddPostIDs adds the "post" edge to the Post entity by ids.
func (m *HashtagMutation) AddPostIDs(ids ...string) {
	if m.post == nil {
		m.post = make(map[string]struct{})
	}
	for i := range ids {
		m.post[ids[i]] = struct{}{}
	}
}

// ClearPost clears the "post" edge to the Post entity.
func (m *HashtagMutation) ClearPost() {
	m.clearedpost = true
}

// PostCleared reports if the "post" edge to the Post entity was cleared.
func (m *HashtagMutation) PostCleared() bool {
	return m.clearedpost
}

// RemovePostIDs removes the "post" edge to the Post entity by IDs.
func (m *HashtagMutation) RemovePostIDs(ids ...string) {
	if m.removedpost == nil {
		m.removedpost = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.post, ids[i])
		m.removedpost[ids[i]] = struct{}{}
	}
}

// RemovedPost returns the removed IDs of the "post" edge to the Post entity.
func (m *HashtagMutation) RemovedPostIDs() (ids []string) {
	for id := range m.removedpost {
		ids = append(ids, id)
	}
	return
}

// PostIDs returns the "post" edge IDs in the mutation.
func (m *HashtagMutation) PostIDs() (ids []string) {
	for id := range m.post {
		ids = append(ids, id)
	}
	return
}

// ResetPost resets all changes to the "post" edge.
func (m *HashtagMutation) ResetPost() {
	m.post = nil
	m.clearedpost = false
	m.removedpost = nil
}

// AddHashtagToPostIDs adds the "hashtag_to_post" edge to the HashtagToPost entity by ids.
func (m *HashtagMutation) AddHashtagToPostIDs(ids ...string) {
	if m.hashtag_to_post == nil {
		m.hashtag_to_post = make(map[string]struct{})
	}
	for i := range ids {
		m.hashtag_to_post[ids[i]] = struct{}{}
	}
}

// ClearHashtagToPost clears the "hashtag_to_post" edge to the HashtagToPost entity.
func (m *HashtagMutation) ClearHashtagToPost() {
	m.clearedhashtag_to_post = true
}

// HashtagToPostCleared reports if the "hashtag_to_post" edge to the HashtagToPost entity was cleared.
func (m *HashtagMutation) HashtagToPostCleared() bool {
	return m.clearedhashtag_to_post
}

// RemoveHashtagToPostIDs removes the "hashtag_to_post" edge to the HashtagToPost entity by IDs.
func (m *HashtagMutation) RemoveHashtagToPostIDs(ids ...string) {
	if m.removedhashtag_to_post == nil {
		m.removedhashtag_to_post = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.hashtag_to_post, ids[i])
		m.removedhashtag_to_post[ids[i]] = struct{}{}
	}
}

// RemovedHashtagToPost returns the removed IDs of the "hashtag_to_post" edge to the HashtagToPost entity.
func (m *HashtagMutation) RemovedHashtagToPostIDs() (ids []string) {
	for id := range m.removedhashtag_to_post {
		ids = append(ids, id)
	}
	return
}

// HashtagToPostIDs returns the "hashtag_to_post" edge IDs in the mutation.
func (m *HashtagMutation) HashtagToPostIDs() (ids []string) {
	for id := range m.hashtag_to_post {
		ids = append(ids, id)
	}
	return
}

// ResetHashtagToPost resets all changes to the "hashtag_to_post" edge.
func (m *HashtagMutation) ResetHashtagToPost() {
	m.hashtag_to_post = nil
	m.clearedhashtag_to_post = false
	m.removedhashtag_to_post = nil
}

// Where appends a list predicates to the HashtagMutation builder.
func (m *HashtagMutation) Where(ps ...predicate.Hashtag) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *HashtagMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Hashtag).
func (m *HashtagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HashtagMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HashtagMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HashtagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Hashtag field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HashtagMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Hashtag field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HashtagMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HashtagMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HashtagMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Hashtag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HashtagMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HashtagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HashtagMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Hashtag nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HashtagMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Hashtag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HashtagMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.post != nil {
		edges = append(edges, hashtag.EdgePost)
	}
	if m.hashtag_to_post != nil {
		edges = append(edges, hashtag.EdgeHashtagToPost)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HashtagMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case hashtag.EdgePost:
		ids := make([]ent.Value, 0, len(m.post))
		for id := range m.post {
			ids = append(ids, id)
		}
		return ids
	case hashtag.EdgeHashtagToPost:
		ids := make([]ent.Value, 0, len(m.hashtag_to_post))
		for id := range m.hashtag_to_post {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HashtagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedpost != nil {
		edges = append(edges, hashtag.EdgePost)
	}
	if m.removedhashtag_to_post != nil {
		edges = append(edges, hashtag.EdgeHashtagToPost)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HashtagMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case hashtag.EdgePost:
		ids := make([]ent.Value, 0, len(m.removedpost))
		for id := range m.removedpost {
			ids = append(ids, id)
		}
		return ids
	case hashtag.EdgeHashtagToPost:
		ids := make([]ent.Value, 0, len(m.removedhashtag_to_post))
		for id := range m.removedhashtag_to_post {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HashtagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpost {
		edges = append(edges, hashtag.EdgePost)
	}
	if m.clearedhashtag_to_post {
		edges = append(edges, hashtag.EdgeHashtagToPost)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HashtagMutation) EdgeCleared(name string) bool {
	switch name {
	case hashtag.EdgePost:
		return m.clearedpost
	case hashtag.EdgeHashtagToPost:
		return m.clearedhashtag_to_post
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HashtagMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Hashtag unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HashtagMutation) ResetEdge(name string) error {
	switch name {
	case hashtag.EdgePost:
		m.ResetPost()
		return nil
	case hashtag.EdgeHashtagToPost:
		m.ResetHashtagToPost()
		return nil
	}
	return fmt.Errorf("unknown Hashtag edge %s", name)
}

// HashtagToPostMutation represents an operation that mutates the HashtagToPost nodes in the graph.
type HashtagToPostMutation struct {
	config
	op             Op
	typ            string
	id             *string
	clearedFields  map[string]struct{}
	post           *string
	clearedpost    bool
	hashtag        *string
	clearedhashtag bool
	done           bool
	oldValue       func(context.Context) (*HashtagToPost, error)
	predicates     []predicate.HashtagToPost
}

var _ ent.Mutation = (*HashtagToPostMutation)(nil)

// hashtagtopostOption allows management of the mutation configuration using functional options.
type hashtagtopostOption func(*HashtagToPostMutation)

// newHashtagToPostMutation creates new mutation for the HashtagToPost entity.
func newHashtagToPostMutation(c config, op Op, opts ...hashtagtopostOption) *HashtagToPostMutation {
	m := &HashtagToPostMutation{
		config:        c,
		op:            op,
		typ:           TypeHashtagToPost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHashtagToPostID sets the ID field of the mutation.
func withHashtagToPostID(id string) hashtagtopostOption {
	return func(m *HashtagToPostMutation) {
		var (
			err   error
			once  sync.Once
			value *HashtagToPost
		)
		m.oldValue = func(ctx context.Context) (*HashtagToPost, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().HashtagToPost.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHashtagToPost sets the old HashtagToPost of the mutation.
func withHashtagToPost(node *HashtagToPost) hashtagtopostOption {
	return func(m *HashtagToPostMutation) {
		m.oldValue = func(context.Context) (*HashtagToPost, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HashtagToPostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HashtagToPostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of HashtagToPost entities.
func (m *HashtagToPostMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HashtagToPostMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HashtagToPostMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().HashtagToPost.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHashtagID sets the "hashtag_id" field.
func (m *HashtagToPostMutation) SetHashtagID(s string) {
	m.hashtag = &s
}

// HashtagID returns the value of the "hashtag_id" field in the mutation.
func (m *HashtagToPostMutation) HashtagID() (r string, exists bool) {
	v := m.hashtag
	if v == nil {
		return
	}
	return *v, true
}

// OldHashtagID returns the old "hashtag_id" field's value of the HashtagToPost entity.
// If the HashtagToPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HashtagToPostMutation) OldHashtagID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashtagID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashtagID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashtagID: %w", err)
	}
	return oldValue.HashtagID, nil
}

// ResetHashtagID resets all changes to the "hashtag_id" field.
func (m *HashtagToPostMutation) ResetHashtagID() {
	m.hashtag = nil
}

// SetPostID sets the "post_id" field.
func (m *HashtagToPostMutation) SetPostID(s string) {
	m.post = &s
}

// PostID returns the value of the "post_id" field in the mutation.
func (m *HashtagToPostMutation) PostID() (r string, exists bool) {
	v := m.post
	if v == nil {
		return
	}
	return *v, true
}

// OldPostID returns the old "post_id" field's value of the HashtagToPost entity.
// If the HashtagToPost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HashtagToPostMutation) OldPostID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPostID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPostID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostID: %w", err)
	}
	return oldValue.PostID, nil
}

// ResetPostID resets all changes to the "post_id" field.
func (m *HashtagToPostMutation) ResetPostID() {
	m.post = nil
}

// ClearPost clears the "post" edge to the Post entity.
func (m *HashtagToPostMutation) ClearPost() {
	m.clearedpost = true
}

// PostCleared reports if the "post" edge to the Post entity was cleared.
func (m *HashtagToPostMutation) PostCleared() bool {
	return m.clearedpost
}

// PostIDs returns the "post" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PostID instead. It exists only for internal usage by the builders.
func (m *HashtagToPostMutation) PostIDs() (ids []string) {
	if id := m.post; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPost resets all changes to the "post" edge.
func (m *HashtagToPostMutation) ResetPost() {
	m.post = nil
	m.clearedpost = false
}

// ClearHashtag clears the "hashtag" edge to the Hashtag entity.
func (m *HashtagToPostMutation) ClearHashtag() {
	m.clearedhashtag = true
}

// HashtagCleared reports if the "hashtag" edge to the Hashtag entity was cleared.
func (m *HashtagToPostMutation) HashtagCleared() bool {
	return m.clearedhashtag
}

// HashtagIDs returns the "hashtag" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HashtagID instead. It exists only for internal usage by the builders.
func (m *HashtagToPostMutation) HashtagIDs() (ids []string) {
	if id := m.hashtag; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHashtag resets all changes to the "hashtag" edge.
func (m *HashtagToPostMutation) ResetHashtag() {
	m.hashtag = nil
	m.clearedhashtag = false
}

// Where appends a list predicates to the HashtagToPostMutation builder.
func (m *HashtagToPostMutation) Where(ps ...predicate.HashtagToPost) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *HashtagToPostMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (HashtagToPost).
func (m *HashtagToPostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HashtagToPostMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.hashtag != nil {
		fields = append(fields, hashtagtopost.FieldHashtagID)
	}
	if m.post != nil {
		fields = append(fields, hashtagtopost.FieldPostID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HashtagToPostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hashtagtopost.FieldHashtagID:
		return m.HashtagID()
	case hashtagtopost.FieldPostID:
		return m.PostID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HashtagToPostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hashtagtopost.FieldHashtagID:
		return m.OldHashtagID(ctx)
	case hashtagtopost.FieldPostID:
		return m.OldPostID(ctx)
	}
	return nil, fmt.Errorf("unknown HashtagToPost field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HashtagToPostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hashtagtopost.FieldHashtagID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashtagID(v)
		return nil
	case hashtagtopost.FieldPostID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostID(v)
		return nil
	}
	return fmt.Errorf("unknown HashtagToPost field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HashtagToPostMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HashtagToPostMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HashtagToPostMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown HashtagToPost numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HashtagToPostMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HashtagToPostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HashtagToPostMutation) ClearField(name string) error {
	return fmt.Errorf("unknown HashtagToPost nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HashtagToPostMutation) ResetField(name string) error {
	switch name {
	case hashtagtopost.FieldHashtagID:
		m.ResetHashtagID()
		return nil
	case hashtagtopost.FieldPostID:
		m.ResetPostID()
		return nil
	}
	return fmt.Errorf("unknown HashtagToPost field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HashtagToPostMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.post != nil {
		edges = append(edges, hashtagtopost.EdgePost)
	}
	if m.hashtag != nil {
		edges = append(edges, hashtagtopost.EdgeHashtag)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HashtagToPostMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case hashtagtopost.EdgePost:
		if id := m.post; id != nil {
			return []ent.Value{*id}
		}
	case hashtagtopost.EdgeHashtag:
		if id := m.hashtag; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HashtagToPostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HashtagToPostMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HashtagToPostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpost {
		edges = append(edges, hashtagtopost.EdgePost)
	}
	if m.clearedhashtag {
		edges = append(edges, hashtagtopost.EdgeHashtag)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HashtagToPostMutation) EdgeCleared(name string) bool {
	switch name {
	case hashtagtopost.EdgePost:
		return m.clearedpost
	case hashtagtopost.EdgeHashtag:
		return m.clearedhashtag
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HashtagToPostMutation) ClearEdge(name string) error {
	switch name {
	case hashtagtopost.EdgePost:
		m.ClearPost()
		return nil
	case hashtagtopost.EdgeHashtag:
		m.ClearHashtag()
		return nil
	}
	return fmt.Errorf("unknown HashtagToPost unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HashtagToPostMutation) ResetEdge(name string) error {
	switch name {
	case hashtagtopost.EdgePost:
		m.ResetPost()
		return nil
	case hashtagtopost.EdgeHashtag:
		m.ResetHashtag()
		return nil
	}
	return fmt.Errorf("unknown HashtagToPost edge %s", name)
}

// PostMutation represents an operation that mutates the Post nodes in the graph.
type PostMutation struct {
	config
	op                     Op
	typ                    string
	id                     *string
	title                  *string
	clearedFields          map[string]struct{}
	hashtags               map[string]struct{}
	removedhashtags        map[string]struct{}
	clearedhashtags        bool
	hashtag_to_post        map[string]struct{}
	removedhashtag_to_post map[string]struct{}
	clearedhashtag_to_post bool
	done                   bool
	oldValue               func(context.Context) (*Post, error)
	predicates             []predicate.Post
}

var _ ent.Mutation = (*PostMutation)(nil)

// postOption allows management of the mutation configuration using functional options.
type postOption func(*PostMutation)

// newPostMutation creates new mutation for the Post entity.
func newPostMutation(c config, op Op, opts ...postOption) *PostMutation {
	m := &PostMutation{
		config:        c,
		op:            op,
		typ:           TypePost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPostID sets the ID field of the mutation.
func withPostID(id string) postOption {
	return func(m *PostMutation) {
		var (
			err   error
			once  sync.Once
			value *Post
		)
		m.oldValue = func(ctx context.Context) (*Post, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Post.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPost sets the old Post of the mutation.
func withPost(node *Post) postOption {
	return func(m *PostMutation) {
		m.oldValue = func(context.Context) (*Post, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Post entities.
func (m *PostMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PostMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PostMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Post.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *PostMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *PostMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *PostMutation) ResetTitle() {
	m.title = nil
}

// AddHashtagIDs adds the "hashtags" edge to the Hashtag entity by ids.
func (m *PostMutation) AddHashtagIDs(ids ...string) {
	if m.hashtags == nil {
		m.hashtags = make(map[string]struct{})
	}
	for i := range ids {
		m.hashtags[ids[i]] = struct{}{}
	}
}

// ClearHashtags clears the "hashtags" edge to the Hashtag entity.
func (m *PostMutation) ClearHashtags() {
	m.clearedhashtags = true
}

// HashtagsCleared reports if the "hashtags" edge to the Hashtag entity was cleared.
func (m *PostMutation) HashtagsCleared() bool {
	return m.clearedhashtags
}

// RemoveHashtagIDs removes the "hashtags" edge to the Hashtag entity by IDs.
func (m *PostMutation) RemoveHashtagIDs(ids ...string) {
	if m.removedhashtags == nil {
		m.removedhashtags = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.hashtags, ids[i])
		m.removedhashtags[ids[i]] = struct{}{}
	}
}

// RemovedHashtags returns the removed IDs of the "hashtags" edge to the Hashtag entity.
func (m *PostMutation) RemovedHashtagsIDs() (ids []string) {
	for id := range m.removedhashtags {
		ids = append(ids, id)
	}
	return
}

// HashtagsIDs returns the "hashtags" edge IDs in the mutation.
func (m *PostMutation) HashtagsIDs() (ids []string) {
	for id := range m.hashtags {
		ids = append(ids, id)
	}
	return
}

// ResetHashtags resets all changes to the "hashtags" edge.
func (m *PostMutation) ResetHashtags() {
	m.hashtags = nil
	m.clearedhashtags = false
	m.removedhashtags = nil
}

// AddHashtagToPostIDs adds the "hashtag_to_post" edge to the HashtagToPost entity by ids.
func (m *PostMutation) AddHashtagToPostIDs(ids ...string) {
	if m.hashtag_to_post == nil {
		m.hashtag_to_post = make(map[string]struct{})
	}
	for i := range ids {
		m.hashtag_to_post[ids[i]] = struct{}{}
	}
}

// ClearHashtagToPost clears the "hashtag_to_post" edge to the HashtagToPost entity.
func (m *PostMutation) ClearHashtagToPost() {
	m.clearedhashtag_to_post = true
}

// HashtagToPostCleared reports if the "hashtag_to_post" edge to the HashtagToPost entity was cleared.
func (m *PostMutation) HashtagToPostCleared() bool {
	return m.clearedhashtag_to_post
}

// RemoveHashtagToPostIDs removes the "hashtag_to_post" edge to the HashtagToPost entity by IDs.
func (m *PostMutation) RemoveHashtagToPostIDs(ids ...string) {
	if m.removedhashtag_to_post == nil {
		m.removedhashtag_to_post = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.hashtag_to_post, ids[i])
		m.removedhashtag_to_post[ids[i]] = struct{}{}
	}
}

// RemovedHashtagToPost returns the removed IDs of the "hashtag_to_post" edge to the HashtagToPost entity.
func (m *PostMutation) RemovedHashtagToPostIDs() (ids []string) {
	for id := range m.removedhashtag_to_post {
		ids = append(ids, id)
	}
	return
}

// HashtagToPostIDs returns the "hashtag_to_post" edge IDs in the mutation.
func (m *PostMutation) HashtagToPostIDs() (ids []string) {
	for id := range m.hashtag_to_post {
		ids = append(ids, id)
	}
	return
}

// ResetHashtagToPost resets all changes to the "hashtag_to_post" edge.
func (m *PostMutation) ResetHashtagToPost() {
	m.hashtag_to_post = nil
	m.clearedhashtag_to_post = false
	m.removedhashtag_to_post = nil
}

// Where appends a list predicates to the PostMutation builder.
func (m *PostMutation) Where(ps ...predicate.Post) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PostMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Post).
func (m *PostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PostMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.title != nil {
		fields = append(fields, post.FieldTitle)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case post.FieldTitle:
		return m.Title()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case post.FieldTitle:
		return m.OldTitle(ctx)
	}
	return nil, fmt.Errorf("unknown Post field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case post.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	}
	return fmt.Errorf("unknown Post field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PostMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PostMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PostMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Post numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PostMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PostMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Post nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PostMutation) ResetField(name string) error {
	switch name {
	case post.FieldTitle:
		m.ResetTitle()
		return nil
	}
	return fmt.Errorf("unknown Post field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PostMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.hashtags != nil {
		edges = append(edges, post.EdgeHashtags)
	}
	if m.hashtag_to_post != nil {
		edges = append(edges, post.EdgeHashtagToPost)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PostMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case post.EdgeHashtags:
		ids := make([]ent.Value, 0, len(m.hashtags))
		for id := range m.hashtags {
			ids = append(ids, id)
		}
		return ids
	case post.EdgeHashtagToPost:
		ids := make([]ent.Value, 0, len(m.hashtag_to_post))
		for id := range m.hashtag_to_post {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedhashtags != nil {
		edges = append(edges, post.EdgeHashtags)
	}
	if m.removedhashtag_to_post != nil {
		edges = append(edges, post.EdgeHashtagToPost)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PostMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case post.EdgeHashtags:
		ids := make([]ent.Value, 0, len(m.removedhashtags))
		for id := range m.removedhashtags {
			ids = append(ids, id)
		}
		return ids
	case post.EdgeHashtagToPost:
		ids := make([]ent.Value, 0, len(m.removedhashtag_to_post))
		for id := range m.removedhashtag_to_post {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedhashtags {
		edges = append(edges, post.EdgeHashtags)
	}
	if m.clearedhashtag_to_post {
		edges = append(edges, post.EdgeHashtagToPost)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PostMutation) EdgeCleared(name string) bool {
	switch name {
	case post.EdgeHashtags:
		return m.clearedhashtags
	case post.EdgeHashtagToPost:
		return m.clearedhashtag_to_post
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PostMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Post unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PostMutation) ResetEdge(name string) error {
	switch name {
	case post.EdgeHashtags:
		m.ResetHashtags()
		return nil
	case post.EdgeHashtagToPost:
		m.ResetHashtagToPost()
		return nil
	}
	return fmt.Errorf("unknown Post edge %s", name)
}
